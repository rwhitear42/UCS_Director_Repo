<?xml version="1.0" ?><OrchExportInfo><Time>Wed Feb 14 18:21:01 UTC 2018</Time><User></User><Comments></Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"CSP2100_DELETE_NTP_Server","taskLabel":"CSP2100 Delete NTP Server","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"Configname: InputConfigCategory: SAE\r\n<------- Task Information ------->\r\nTask contains 8 inputs\r\n   cspServerName (Label: \'CSP Server IP or FQDN\', Type: text, MappableType: gen_text_input)\r\n   cspServerPort (Label: \'CSP Server Port\', Type: text, MappableType: gen_text_input)\r\n   cspUserName (Label: \'CSP Username\', Type: text, MappableType: gen_text_input)\r\n   cspPassword (Label: \'CSP Password\', Type: password, MappableType: password)\r\n   useProxy (Label: \'Use Proxy\', Type: embedded-lov, MappableType: gen_text_input)\r\n   proxyName (Label: \'Proxy Name (If Use Proxy set to true)\', Type: text, MappableType: gen_text_input)\r\n   proxyPort (Label: \'Proxy Port (If Use Proxy set to true)\', Type: text, MappableType: gen_text_input)\r\n   ntpServerName (Label: \'NTP Server IP or FQDN\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 0 outputs\r\nisRepoUsed: falseRepo file: Repo: script: importPackage(java.util);\nimportPackage(java.lang);\nimportPackage(java.io);\nimportPackage(com.cloupia.lib.util);\nimportPackage(org.apache.commons.httpclient);\nimportPackage(org.apache.commons.httpclient.cookie);\nimportPackage(org.apache.commons.httpclient.methods);\nimportPackage(org.apache.commons.httpclient.auth);\nimportPackage(org.apache.commons.httpclient.protocol);\nimportClass(org.apache.commons.httpclient.protocol.SecureProtocolSocketFactory);\nimportPackage(com.cloupia.lib.cIaaS.vcd.api);\n\n/*******************************************************************************\n * Copyright (c) 2016 Cisco and/or its affiliates\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *******************************************************************************/\n\n/*******************************************************************************\n**\n**    Author: Russ Whitear (rwhitear@cisco.com)\n**\n**    IMPORTANT NOTE: THIS SCRIPT WILL NOT WORK WITH UCS DIRECTOR\n**                    VERSIONS PRIOR TO 5.4\n**\n**    Version: 1.0\n**\n**    Taskname: CSP_DELETE_NTP_Server\n**\n**    Returns: JSON representation of the pNIC configuration. Something like so:\n**\n**\n *******************************************************************************/\n\n\n// main()\n\n// CSP Access Information.\nvar cspServerName = input.cspServerName+\"\";\nvar cspServerPort = input.cspServerPort+\"\";\nvar cspUserName = input.cspUserName+\"\";\nvar cspPassword = input.cspPassword+\"\";\nvar ntpServerName = input.ntpServerName+\"\";\n\n// URI for this GET request.\nvar uri = \"/api/running/ntps/ntp/\"+ntpServerName;\n\n// Web proxy requirement to access CSP server.\nvar useProxy = input.useProxy+\"\";\nvar proxyName = input.proxyName+\"\";\nvar proxyPort = input.proxyPort+\"\";\n\n// Create new httpClient object.\nvar httpClient = new HttpClient();\n\n// Tolerate SSL self signed certs and no hostname verification.\nhttpClient = CustomEasySSLSocketFactory.getIgnoreSSLClient(cspServerName, cspServerPort);\n\nhttpClient.getParams().setCookiePolicy(\"default\");\n\n// Configure Basic Auth for accessing the CSP2100 REST API\nhttpClient.getParams().setAuthenticationPreemptive(true);\nvar defaultcreds = new UsernamePasswordCredentials(cspUserName, cspPassword);\nhttpClient.getState().setCredentials(new AuthScope(cspServerName, -1, null), defaultcreds);\n\n\nif( useProxy.match(\"true\") ) {\n  logger.addInfo(\"PROXY: Using \" +proxyName+ \":\" +proxyPort+ \".\");\n  var config = httpClient.getHostConfiguration();\n  config.setProxy(proxyName, proxyPort);\n} else {\n  logger.addInfo(\"PROXY: No proxy configured.\")\n}\n\n// DELETE Method.\nvar httpMethod = new DeleteMethod(uri);\n\n// Add the appropriate HTTP headers.\nhttpMethod.addRequestHeader(\"Accept\", \"*/*\");\nhttpMethod.addRequestHeader(\"Content-Type\", \"application/json\");\nhttpMethod.addRequestHeader(\"Connection\", \"close\");\n\n// Execute the GET request\nhttpClient.executeMethod(httpMethod);\n\n// Retrieve HTTP status code and response data.\nvar statusCode = httpMethod.getStatusCode();\nvar response = httpMethod.getResponseBodyAsString();\n\n// Release the connection.\nhttpMethod.releaseConnection();\n\nlogger.addInfo(\"statusCode: \" +statusCode);\nlogger.addInfo(\"response: \" +response);\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>